import streamlit as st
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, f1_score
import plotly.express as px
from datetime import datetime
from io import BytesIO
import base64
from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image, Table, TableStyle
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet
import os

# ==========================================================
# CONFIGURATION G√âN√âRALE
# ==========================================================
st.set_page_config(page_title="SNIM Predict", page_icon="ü§ñ", layout="wide")

st.markdown("""
<style>
h1, h2, h3 {color:#004b8d;}
.main {background-color:#ffffff; padding:25px; border-radius:10px;}
</style>
""", unsafe_allow_html=True)

if os.path.exists("snim_logo.png"):
    st.image("snim_logo.png", width=160)

st.title("üí° SNIM Predict ‚Äì Supervision & Diagnostic Intelligent")
st.write("_IA de maintenance pr√©dictive d√©velopp√©e par **HAMDINOU Moulaye Driss**_")

# ==========================================================
# INTRODUCTION
# ==========================================================
st.markdown("""
### üìñ Introduction

Les donn√©es utilis√©es proviennent d‚Äôun **jeu de donn√©es public de maintenance pr√©dictive**,
simulant une flotte de **5 engins industriels** envoyant leurs relev√©s de capteurs.
L‚Äôobjectif est de pr√©dire la **probabilit√© de panne** (`failure = 1`) √† partir des mesures.

Nous utilisons ici un **√©chantillon de 10 000 lignes**, repr√©sentatif mais l√©ger,
permettant d‚Äôentra√Æner rapidement un mod√®le d‚Äôintelligence artificielle
pour le diagnostic pr√©ventif et la supervision en temps r√©el.
""")

# ==========================================================
# CHARGEMENT DU DATASET INTERNE
# ==========================================================
st.info("üìÇ Chargement du dataset interne (5 engins / 10 000 lignes)...")

try:
    df = pd.read_csv("subset_5_engins_10000.csv")
    st.success(f"‚úÖ Donn√©es charg√©es : {df.shape[0]} lignes ‚Äì {df['device'].nunique()} engins d√©tect√©s")

    # V√©rif colonnes
    expected_metrics = [c for c in df.columns if "metric" in c]
    if len(expected_metrics) == 0:
        st.error("‚ùå Aucune colonne 'metric' d√©tect√©e.")
    else:
        # ==========================================================
        # ENTRA√éNEMENT DU MOD√àLE
        # ==========================================================
        X = df[expected_metrics]
        y = df["failure"]

        X_train, X_test, y_train, y_test = train_test_split(
            X, y, test_size=0.3, stratify=y, random_state=42
        )

        model = RandomForestClassifier(
            n_estimators=200, class_weight="balanced", random_state=42, n_jobs=-1
        )
        model.fit(X_train, y_train)
        y_pred = model.predict(X_test)

        acc = accuracy_score(y_test, y_pred)
        f1 = f1_score(y_test, y_pred)

        st.subheader("üìä Performances du mod√®le")
        col1, col2 = st.columns(2)
        col1.metric("Exactitude (Accuracy)", f"{acc:.3f}")
        col2.metric("Score F1", f"{f1:.3f}")

        # ==========================================================
        # ANALYSE PAR ENGIN
        # ==========================================================
        st.markdown("### üèóÔ∏è Analyse par engin (device)")
        df["predicted_failure"] = model.predict(X)
        resume = df.groupby("device")["predicted_failure"].mean().reset_index()
        resume["Statut"] = resume["predicted_failure"].apply(
            lambda x: "üî¥ Risque √©lev√©" if x > 0.6 else ("üü† Risque moyen" if x > 0.3 else "üü¢ Normal")
        )

        fig = px.bar(
            resume,
            x="device",
            y="predicted_failure",
            color="Statut",
            color_discrete_map={"üî¥ Risque √©lev√©": "red", "üü† Risque moyen": "orange", "üü¢ Normal": "green"},
            title="Indice de risque moyen par engin"
        )
        st.plotly_chart(fig, use_container_width=True)

        # ==========================================================
        # SCH√âMA EXPLICATIF (IA)
        # ==========================================================
        st.markdown("### üß≠ Sch√©ma de fonctionnement de SNIM Predict")
        mermaid = """
        graph TD
        A[Capteurs IoT sur engins] --> B[Collecte & Pr√©traitement des signaux]
        B --> C[Mod√®le IA Random Forest]
        C --> D[Analyse des comportements]
        D --> E{Diagnostic pr√©dictif}
        E -->|üü¢ Normal| F[OK]
        E -->|üü† D√©rive| G[Surveillance]
        E -->|üî¥ Panne| H[Intervention urgente]
        """
        st.markdown(f"```mermaid\n{mermaid}\n```")

        # ==========================================================
        # G√âN√âRATION DU RAPPORT PDF
        # ==========================================================
        if st.button("üìÑ G√©n√©rer le rapport PDF"):
            try:
                buffer = BytesIO()
                doc = SimpleDocTemplate(buffer, pagesize=A4)
                styles = getSampleStyleSheet()
                story = []

                if os.path.exists("snim_logo.png"):
                    story.append(Image("snim_logo.png", width=120, height=60))
                story.append(Spacer(1, 15))
                story.append(Paragraph("<b>Rapport SNIM Predict</b>", styles["Title"]))
                story.append(Spacer(1, 15))
                story.append(Paragraph(f"Pr√©cision : {acc:.3f} | Score F1 : {f1:.3f}", styles["Normal"]))
                story.append(Spacer(1, 10))
                story.append(Paragraph("R√©sum√© par engin :", styles["Heading3"]))

                table_data = [["Device", "Indice", "Statut"]] + resume.values.tolist()
                table = Table(table_data)
                table.setStyle(TableStyle([
                    ("BACKGROUND", (0, 0), (-1, 0), colors.lightblue),
                    ("TEXTCOLOR", (0, 0), (-1, 0), colors.white),
                    ("GRID", (0, 0), (-1, -1), 1, colors.black),
                    ("ALIGN", (0, 0), (-1, -1), "CENTER"),
                ]))
                story.append(table)
                story.append(Spacer(1, 20))
                story.append(Paragraph(
                    f"Analyse effectu√©e le {datetime.now().strftime('%d/%m/%Y √† %H:%M')}.<br/>"
                    "<b>IA d√©velopp√©e par HAMDINOU Moulaye Driss ‚Äì Data Scientist</b>",
                    styles["Italic"]
                ))

                doc.build(story)
                buffer.seek(0)
                b64 = base64.b64encode(buffer.read()).decode()
                href = f'<a href="data:application/pdf;base64,{b64}" download="rapport_snim.pdf">üì• T√©l√©charger le rapport PDF</a>'
                st.markdown(href, unsafe_allow_html=True)
            except Exception as e:
                st.error(f"‚ö†Ô∏è Erreur lors de la g√©n√©ration du PDF : {e}")

except FileNotFoundError:
    st.error("‚ùå Le fichier 'subset_5_engins_10000.csv' est introuvable dans le dossier.")
